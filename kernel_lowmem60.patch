diff --git a/drivers/staging/android/lowmemorykiller.c b/drivers/staging/android/lowmemorykiller.c
index b901301..73faa46 100644
--- a/drivers/staging/android/lowmemorykiller.c
+++ b/drivers/staging/android/lowmemorykiller.c
@@ -35,8 +35,16 @@
 #include <linux/oom.h>
 #include <linux/sched.h>
 #include <linux/notifier.h>
+#include <linux/compaction.h>
 
-static uint32_t lowmem_debug_level = 2;
+#define SEC_ADJUST_LMK
+
+#ifdef CONFIG_SWAP
+#include <linux/fs.h>
+#include <linux/swap.h>
+#endif
+
+static uint32_t lowmem_debug_level = 1;
 static int lowmem_adj[6] = {
 	0,
 	1,
@@ -54,6 +62,9 @@ static int lowmem_minfree_size = 4;
 
 static struct task_struct *lowmem_deathpending;
 static unsigned long lowmem_deathpending_timeout;
+#ifdef CONFIG_SWAP
+static int fudgeswap = 0;
+#endif
 
 #define lowmem_print(level, x...)			\
 	do {						\
@@ -90,9 +101,14 @@ static int lowmem_shrink(int nr_to_scan, gfp_t gfp_mask)
 	int selected_tasksize = 0;
 	int selected_oom_adj;
 	int array_size = ARRAY_SIZE(lowmem_adj);
-	int other_free = global_page_state(NR_FREE_PAGES);
+	int other_free = global_page_state(NR_FREE_PAGES) - totalreserve_pages;
+#ifdef SEC_ADJUST_LMK
+	int other_file = global_page_state(NR_INACTIVE_FILE) +
+						global_page_state(NR_ACTIVE_FILE);
+#else
 	int other_file = global_page_state(NR_FILE_PAGES) -
 						global_page_state(NR_SHMEM);
+#endif
 
 	/*
 	 * If we already have a death outstanding, then
@@ -104,18 +120,41 @@ static int lowmem_shrink(int nr_to_scan, gfp_t gfp_mask)
 	if (lowmem_deathpending &&
 	    time_before_eq(jiffies, lowmem_deathpending_timeout))
 		return 0;
+ 
+#ifdef CONFIG_SWAP
+	if(fudgeswap != 0){
+		struct sysinfo si;
+		si_swapinfo(&si);
+
+		if(si.freeswap > 0){
+			if(fudgeswap > si.freeswap)
+				other_file += si.freeswap;
+			else
+				other_file += fudgeswap;
+		}
+	}
+#endif
 
 	if (lowmem_adj_size < array_size)
 		array_size = lowmem_adj_size;
 	if (lowmem_minfree_size < array_size)
 		array_size = lowmem_minfree_size;
 	for (i = 0; i < array_size; i++) {
+#ifdef SEC_ADJUST_LMK
+		if ((other_free + other_file) < lowmem_minfree[i])
+#else
 		if (other_free < lowmem_minfree[i] &&
-				other_file < lowmem_minfree[i]) {
+            other_file < lowmem_minfree[i])
+#endif
+        {
 			min_adj = lowmem_adj[i];
 			break;
 		}
 	}
+#ifdef SEC_ADJUST_LMK
+	if (min_adj == OOM_ADJUST_MAX + 1)
+		return 0;
+#endif
 	if (nr_to_scan > 0)
 		lowmem_print(3, "lowmem_shrink %d, %x, ofree %d %d, ma %d\n",
 			     nr_to_scan, gfp_mask, other_free, other_file,
@@ -124,7 +163,12 @@ static int lowmem_shrink(int nr_to_scan, gfp_t gfp_mask)
 		global_page_state(NR_ACTIVE_FILE) +
 		global_page_state(NR_INACTIVE_ANON) +
 		global_page_state(NR_INACTIVE_FILE);
-	if (nr_to_scan <= 0 || min_adj == OOM_ADJUST_MAX + 1) {
+#ifdef SEC_ADJUST_LMK
+	if (nr_to_scan <= 0)
+#else
+	if (nr_to_scan <= 0 || min_adj == OOM_ADJUST_MAX + 1)
+#endif
+	{
 		lowmem_print(5, "lowmem_shrink %d, %x, return %d\n",
 			     nr_to_scan, gfp_mask, rem);
 		return rem;
@@ -175,6 +219,10 @@ static int lowmem_shrink(int nr_to_scan, gfp_t gfp_mask)
 		force_sig(SIGKILL, selected);
 		rem -= selected_tasksize;
 	}
+#ifdef SEC_ADJUST_LMK
+	else
+		rem = -1;
+#endif
 	lowmem_print(4, "lowmem_shrink %d, %x, return %d\n",
 		     nr_to_scan, gfp_mask, rem);
 	read_unlock(&tasklist_lock);
@@ -206,6 +254,10 @@ module_param_array_named(minfree, lowmem_minfree, uint, &lowmem_minfree_size,
 			 S_IRUGO | S_IWUSR);
 module_param_named(debug_level, lowmem_debug_level, uint, S_IRUGO | S_IWUSR);
 
+#ifdef CONFIG_SWAP
+module_param_named(fudgeswap, fudgeswap, int, S_IRUGO | S_IWUSR);
+#endif
+
 module_init(lowmem_init);
 module_exit(lowmem_exit);
 
