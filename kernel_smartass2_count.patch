diff --git a/drivers/cpufreq/cpufreq_smartass2.c b/drivers/cpufreq/cpufreq_smartass2.c
index cee09ba..606abae 100644
--- a/drivers/cpufreq/cpufreq_smartass2.c
+++ b/drivers/cpufreq/cpufreq_smartass2.c
@@ -502,9 +502,10 @@ static ssize_t store_debug_mask(struct kobject *kobj, struct attribute *attr, co
 	ssize_t res;
 	unsigned long input;
 	res = strict_strtoul(buf, 0, &input);
-	if (res >= 0)
-		debug_mask = input;
-	return res;
+	if (res < 0)
+		return -EINVAL;
+	debug_mask = input;
+	return count;
 }
 
 static ssize_t show_up_rate_us(struct kobject *kobj, struct attribute *attr, char *buf)
@@ -517,9 +518,11 @@ static ssize_t store_up_rate_us(struct kobject *kobj, struct attribute *attr, co
 	ssize_t res;
 	unsigned long input;
 	res = strict_strtoul(buf, 0, &input);
-	if (res >= 0 && input >= 0 && input <= 100000000)
+	if (res < 0)
+		return -EINVAL;
+	if (input >= 0 && input <= 100000000)
 		up_rate_us = input;
-	return res;
+	return count;
 }
 
 static ssize_t show_down_rate_us(struct kobject *kobj, struct attribute *attr, char *buf)
@@ -532,9 +535,11 @@ static ssize_t store_down_rate_us(struct kobject *kobj, struct attribute *attr,
 	ssize_t res;
 	unsigned long input;
 	res = strict_strtoul(buf, 0, &input);
-	if (res >= 0 && input >= 0 && input <= 100000000)
+	if (res < 0)
+		return -EINVAL;
+	if (input >= 0 && input <= 100000000)
 		down_rate_us = input;
-	return res;
+	return count;
 }
 
 static ssize_t show_sleep_ideal_freq(struct kobject *kobj, struct attribute *attr, char *buf)
@@ -547,12 +552,14 @@ static ssize_t store_sleep_ideal_freq(struct kobject *kobj, struct attribute *at
 	ssize_t res;
 	unsigned long input;
 	res = strict_strtoul(buf, 0, &input);
-	if (res >= 0 && input >= 0) {
+	if (res < 0)
+		return -EINVAL;
+	if (input >= 0) {
 		sleep_ideal_freq = input;
 		if (suspended)
 			smartass_update_min_max_allcpus();
 	}
-	return res;
+	return count;
 }
 
 static ssize_t show_sleep_wakeup_freq(struct kobject *kobj, struct attribute *attr, char *buf)
@@ -565,9 +572,11 @@ static ssize_t store_sleep_wakeup_freq(struct kobject *kobj, struct attribute *a
 	ssize_t res;
 	unsigned long input;
 	res = strict_strtoul(buf, 0, &input);
-	if (res >= 0 && input >= 0)
+	if (res < 0)
+		return -EINVAL;
+	if (input >= 0)
 		sleep_wakeup_freq = input;
-	return res;
+	return count;
 }
 
 static ssize_t show_awake_ideal_freq(struct kobject *kobj, struct attribute *attr, char *buf)
@@ -580,12 +589,14 @@ static ssize_t store_awake_ideal_freq(struct kobject *kobj, struct attribute *at
 	ssize_t res;
 	unsigned long input;
 	res = strict_strtoul(buf, 0, &input);
-	if (res >= 0 && input >= 0) {
+	if (res < 0)
+		return -EINVAL;
+	if (input >= 0) {
 		awake_ideal_freq = input;
 		if (!suspended)
 			smartass_update_min_max_allcpus();
 	}
-	return res;
+	return count;
 }
 
 static ssize_t show_sample_rate_jiffies(struct kobject *kobj, struct attribute *attr, char *buf)
@@ -598,9 +609,11 @@ static ssize_t store_sample_rate_jiffies(struct kobject *kobj, struct attribute
 	ssize_t res;
 	unsigned long input;
 	res = strict_strtoul(buf, 0, &input);
-	if (res >= 0 && input > 0 && input <= 1000)
+	if (res < 0)
+		return -EINVAL;
+	if (input > 0 && input <= 1000)
 		sample_rate_jiffies = input;
-	return res;
+	return count;
 }
 
 static ssize_t show_ramp_up_step(struct kobject *kobj, struct attribute *attr, char *buf)
@@ -613,9 +626,11 @@ static ssize_t store_ramp_up_step(struct kobject *kobj, struct attribute *attr,
 	ssize_t res;
 	unsigned long input;
 	res = strict_strtoul(buf, 0, &input);
-	if (res >= 0 && input >= 0)
+	if (res < 0)
+		return -EINVAL;
+	if (input >= 0)
 		ramp_up_step = input;
-	return res;
+	return count;
 }
 
 static ssize_t show_ramp_down_step(struct kobject *kobj, struct attribute *attr, char *buf)
@@ -628,9 +643,11 @@ static ssize_t store_ramp_down_step(struct kobject *kobj, struct attribute *attr
 	ssize_t res;
 	unsigned long input;
 	res = strict_strtoul(buf, 0, &input);
-	if (res >= 0 && input >= 0)
+	if (res < 0)
+		return -EINVAL;
+	if (input >= 0)
 		ramp_down_step = input;
-	return res;
+	return count;
 }
 
 static ssize_t show_max_cpu_load(struct kobject *kobj, struct attribute *attr, char *buf)
@@ -643,9 +660,11 @@ static ssize_t store_max_cpu_load(struct kobject *kobj, struct attribute *attr,
 	ssize_t res;
 	unsigned long input;
 	res = strict_strtoul(buf, 0, &input);
-	if (res >= 0 && input > 0 && input <= 100)
+	if (res < 0)
+		return -EINVAL;
+	if (input > 0 && input <= 100)
 		max_cpu_load = input;
-	return res;
+	return count;
 }
 
 static ssize_t show_min_cpu_load(struct kobject *kobj, struct attribute *attr, char *buf)
@@ -658,9 +677,11 @@ static ssize_t store_min_cpu_load(struct kobject *kobj, struct attribute *attr,
 	ssize_t res;
 	unsigned long input;
 	res = strict_strtoul(buf, 0, &input);
-	if (res >= 0 && input > 0 && input < 100)
+	if (res < 0)
+		return -EINVAL;
+	if (input > 0 && input < 100)
 		min_cpu_load = input;
-	return res;
+	return count;
 }
 
 static ssize_t show_boost_enabled(struct kobject *kobj, struct attribute *attr, char *buf)
@@ -673,9 +694,10 @@ static ssize_t store_boost_enabled(struct kobject *kobj, struct attribute *attr,
 	ssize_t res;
 	unsigned long input;
 	res = strict_strtoul(buf, 0, &input);
-	if (res >= 0)
-		boost_enabled = (input == 0 ? 0 : 1);
-	return res;
+	if (res < 0)
+		return -EINVAL;
+	boost_enabled = (input == 0 ? 0 : 1);
+	return count;
 }
 
 static ssize_t show_boost_pulse(struct kobject *kobj, struct attribute *attr, char *buf)
@@ -688,16 +710,16 @@ static ssize_t store_boost_pulse(struct kobject *kobj, struct attribute *attr, c
 	ssize_t res;
 	unsigned long input;
 	res = strict_strtoul(buf, 0, &input);
-	if (res >= 0) {
-		if (input > MAX_BOOST_PULSE)
-			input = MAX_BOOST_PULSE;
-		if (input <= 1)
-			input = DEFAULT_BOOST_PULSE;
-		boost_pulse_time = ktime_to_us(ktime_get());
-		boost_pulse = input;
-		dprintk(SMARTASS_DEBUG_ALG,"Smartass: boost input=%lu pulse=%lu\n", input, boost_pulse);
-	}
-	return res;
+	if (res < 0)
+		return -EINVAL;
+	if (input > MAX_BOOST_PULSE)
+		input = MAX_BOOST_PULSE;
+	if (input <= 1)
+		input = DEFAULT_BOOST_PULSE;
+	boost_pulse_time = ktime_to_us(ktime_get());
+	boost_pulse = input;
+	dprintk(SMARTASS_DEBUG_ALG,"Smartass: boost input=%lu pulse=%lu\n", input, boost_pulse);
+	return count;
 }
 
 #define define_global_rw_attr(_name)		\
