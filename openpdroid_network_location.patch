diff --git a/services/java/com/android/server/PrivacyTelephonyRegistry.java b/services/java/com/android/server/PrivacyTelephonyRegistry.java
index fcba495..be948ae 100644
--- a/services/java/com/android/server/PrivacyTelephonyRegistry.java
+++ b/services/java/com/android/server/PrivacyTelephonyRegistry.java
@@ -53,8 +53,11 @@ public class PrivacyTelephonyRegistry extends TelephonyRegistry{
 	
 	private static final int PERMISSION_SERVICE_STATE = 4;
 	
+	private Context context;
+	
 	public PrivacyTelephonyRegistry(Context context) {
 		super(context);
+		this.context = context;
 		pSetMan = new PrivacySettingsManager(context, IPrivacySettingsManager.Stub.asInterface(ServiceManager.getService("privacy")));
 		try{
 			registerPrivacy();
@@ -146,128 +149,27 @@ public class PrivacyTelephonyRegistry extends TelephonyRegistry{
 		} catch(Exception e){
 			Log.e(P_TAG,"failed to register privacy broadcastreceiver");
 		}
-        if (events != 0) {
-            /* Checks permission and throws Security exception */
-            checkListenerPermission(events);
-
-            synchronized (mRecords) {
-                // register
-                Record r = null;
-                find_and_add: {
-                    IBinder b = callback.asBinder();
-                    final int N = mRecords.size();
-                    for (int i = 0; i < N; i++) {
-                        r = mRecords.get(i);
-                        if (b == r.binder) {
-                            break find_and_add;
-                        }
-                    }
-                    r = new Record();
-                    r.binder = b;
-                    r.callback = callback;
-                    r.pkgForDebug = pkgForDebug;
-                    mRecords.add(r);
-                }
-                int send = events & (events ^ r.events);
-                r.events = events;
-                if (notifyNow) {
-                    if ((events & PhoneStateListener.LISTEN_SERVICE_STATE) != 0) {
-//                        try {
-//                        	//not forward now, wait for next
-//                            //r.callback.onServiceStateChanged(new ServiceState(mServiceState));
-//                        } catch (RemoteException ex) {
-//                            remove(r.binder);
-//                        }
-                    }
-                    if ((events & PhoneStateListener.LISTEN_SIGNAL_STRENGTH) != 0) {
-                        try {
-                            int gsmSignalStrength = mSignalStrength.getGsmSignalStrength();
-                            r.callback.onSignalStrengthChanged((gsmSignalStrength == 99 ? -1
-                                    : gsmSignalStrength));
-                        } catch (RemoteException ex) {
-                            remove(r.binder);
-                        }
-                    }
-                    if ((events & PhoneStateListener.LISTEN_MESSAGE_WAITING_INDICATOR) != 0) {
-                        try {
-                            r.callback.onMessageWaitingIndicatorChanged(mMessageWaiting);
-                        } catch (RemoteException ex) {
-                            remove(r.binder);
-                        }
-                    }
-                    if ((events & PhoneStateListener.LISTEN_CALL_FORWARDING_INDICATOR) != 0) {
-                        try {
-                            r.callback.onCallForwardingIndicatorChanged(mCallForwarding);
-                        } catch (RemoteException ex) {
-                            remove(r.binder);
-                        }
-                    }
-                    if ((events & PhoneStateListener.LISTEN_CELL_LOCATION) != 0) {
-//                        try {
-//                        	//we do not forward now!
-//                            //r.callback.onCellLocationChanged(new Bundle(mCellLocation));
-//                        } catch (RemoteException ex) {
-//                            remove(r.binder);
-//                        }
-                    }
-                    if ((events & PhoneStateListener.LISTEN_CALL_STATE) != 0) {
-                        try {
-                            r.callback.onCallStateChanged(mCallState, mCallIncomingNumber);
-                        } catch (RemoteException ex) {
-                            remove(r.binder);
-                        }
-                    }
-                    if ((events & PhoneStateListener.LISTEN_DATA_CONNECTION_STATE) != 0) {
-                        try {
-                            r.callback.onDataConnectionStateChanged(mDataConnectionState,
-                                mDataConnectionNetworkType);
-                        } catch (RemoteException ex) {
-                            remove(r.binder);
-                        }
-                    }
-                    if ((events & PhoneStateListener.LISTEN_DATA_ACTIVITY) != 0) {
-                        try {
-                            r.callback.onDataActivity(mDataActivity);
-                        } catch (RemoteException ex) {
-                            remove(r.binder);
-                        }
-                    }
-                    if ((events & PhoneStateListener.LISTEN_SIGNAL_STRENGTHS) != 0) {
-                        try {
-                            r.callback.onSignalStrengthsChanged(mSignalStrength);
-                        } catch (RemoteException ex) {
-                            remove(r.binder);
-                        }
-                    }
-                    if ((events & PhoneStateListener.LISTEN_OTASP_CHANGED) != 0) {
-                        try {
-                            r.callback.onOtaspChanged(mOtaspMode);
-                        } catch (RemoteException ex) {
-                            remove(r.binder);
-                        }
-                    }
-                    if ((events & PhoneStateListener.LISTEN_CELL_INFO) != 0) {
-//                        try {
-//                        	//we also do not forward now
-//                            //r.callback.onCellInfoChanged(new CellInfo(mCellInfo));
-//                        } catch (RemoteException ex) {
-//                            remove(r.binder);
-//                        }
-                    }
-                }
-            }
-        } else {
-            remove(callback.asBinder());
-        }
+    	
+    	if(!isPackageAllowed(PERMISSION_CELL_LOCATION, pkgForDebug) || !isPackageAllowed(PERMISSION_CELL_INFO, pkgForDebug)) {
+    		Log.i(P_TAG, "package: " + pkgForDebug + " is now listening. notifyNow: false. isAllowed: false");
+    		super.listen(pkgForDebug, callback, events, false);
+    	} else {
+    		Log.i(P_TAG, "package: " + pkgForDebug + " is now listening. notifyNow: " + notifyNow + ". isAllowed: true");
+    		super.listen(pkgForDebug, callback, events, notifyNow);
+    	}
     }
 	
 	
 	private boolean isPackageAllowed(int PERMISSION, String packageName){
+		if(pSetMan == null) pSetMan = new PrivacySettingsManager(context, IPrivacySettingsManager.Stub.asInterface(ServiceManager.getService("privacy")));
 		PrivacySettings settings = pSetMan.getSettings(packageName, Process.myUid());
-		if(settings == null) return false;
+		if(settings == null){
+			Log.e(P_TAG,"package: " + packageName + " allowed, no settings");
+			return true;
+		}
 		switch(PERMISSION){
 			case PERMISSION_CELL_LOCATION:
-				if(((settings.getLocationNetworkSetting() != PrivacySettings.REAL) || (settings.getLocationGpsSetting() != PrivacySettings.REAL)))
+				if(settings.getLocationNetworkSetting() != PrivacySettings.REAL)
 					return false;
 				else 
 					return true;
