diff --git a/power/power.c b/power/power.c
index f3e73c9..a257d5c 100644
--- a/power/power.c
+++ b/power/power.c
@@ -29,6 +29,7 @@
 #define SCALING_GOVERNOR_PATH "/sys/devices/system/cpu/cpu0/cpufreq/scaling_governor"
 #define BOOSTPULSE_ONDEMAND "/sys/devices/system/cpu/cpufreq/ondemand/boostpulse"
 #define BOOSTPULSE_INTERACTIVE "/sys/devices/system/cpu/cpufreq/interactive/boostpulse"
+#define BOOSTPULSE_SMARTASS2 "/sys/devices/system/cpu/cpufreq/smartass/boost_pulse"
 #define SAMPLING_RATE_ONDEMAND "/sys/devices/system/cpu/cpufreq/ondemand/sampling_rate"
 #define SAMPLING_RATE_SCREEN_ON "50000"
 #define SAMPLING_RATE_SCREEN_OFF "500000"
@@ -123,6 +124,8 @@ static int boostpulse_open(struct cm_power_module *cm)
                 cm->boostpulse_fd = open(BOOSTPULSE_ONDEMAND, O_WRONLY);
             else if (strncmp(governor, "interactive", 11) == 0)
                 cm->boostpulse_fd = open(BOOSTPULSE_INTERACTIVE, O_WRONLY);
+            else if (strncmp(governor, "smartassV2", 10) == 0)
+                cm->boostpulse_fd = open(BOOSTPULSE_SMARTASS2, O_WRONLY);
 
             if (cm->boostpulse_fd < 0 && !cm->boostpulse_warned) {
                 strerror_r(errno, buf, sizeof(buf));
@@ -176,15 +179,21 @@ static void cm_power_hint(struct power_module *module, power_hint_t hint,
     }
 }
 
+static int cm_is_ondemand() {
+    return (get_scaling_governor(governor, sizeof(governor)) >= 0 && strncmp(governor, "ondemand", 8) == 0);
+}
+
 static void cm_power_set_interactive(struct power_module *module, int on)
 {
-    sysfs_write(SAMPLING_RATE_ONDEMAND,
-            on ? SAMPLING_RATE_SCREEN_ON : SAMPLING_RATE_SCREEN_OFF);
+    if (cm_is_ondemand())
+        sysfs_write(SAMPLING_RATE_ONDEMAND,
+                on ? SAMPLING_RATE_SCREEN_ON : SAMPLING_RATE_SCREEN_OFF);
 }
 
 static void cm_power_init(struct power_module *module)
 {
-    sysfs_write(SAMPLING_RATE_ONDEMAND, SAMPLING_RATE_SCREEN_ON);
+    if (cm_is_ondemand())
+        sysfs_write(SAMPLING_RATE_ONDEMAND, SAMPLING_RATE_SCREEN_ON);
 }
 
 static struct hw_module_methods_t power_module_methods = {
